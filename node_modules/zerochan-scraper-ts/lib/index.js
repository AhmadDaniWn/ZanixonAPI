"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZeroChan = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const https_1 = __importDefault(require("https"));
const cheerio_1 = __importDefault(require("cheerio"));
async function safeParseJSON(response) {
    let body = await response.text();
    try {
        return JSON.parse(body);
    }
    catch (err) {
        try {
            body = body.replaceAll(/[\\]/g, "");
            body = body.replace("next: true", '"status": "done"');
            return JSON.parse(body);
        }
        catch (e) {
            // console.log(body)
            if (body?.includes('Some content is for members only'))
                return "Login First";
            // throw err;
            return false;
        }
    }
}
function parseCookies(response) {
    const raw = response;
    return raw.map((entry) => {
        const parts = entry.split(';');
        const cookiePart = parts[0];
        return cookiePart;
    }).join(';');
}
async function get_login(username, pass) {
    const url = `https://www.zerochan.net/login?ref=%2F&name=${username}&password=${pass}&login=Login`;
    return new Promise((resolve) => {
        https_1.default.get(url, (res) => {
            var data;
            res.on("data", (chunk) => {
                data += chunk;
            });
            res.on("end", () => {
                resolve(parseCookies(res.headers['set-cookie']));
            });
        });
    });
}
class ZeroChan {
    constructor(projectName, username) {
        this.login = async (username, password) => {
            let res = await get_login(username, password);
            this.cookie = res || undefined;
        };
        this.getImage = async (keyword, page = 1, strict = "on") => {
            if (isNaN(Number(page))) {
                throw new Error("Invalid Page Number!");
            }
            let opts = {};
            opts = {
                headers: {
                    "user-agent": this.project
                }
            };
            let strictMode = '&strict';
            if (strict.toLowerCase() !== 'off') {
                strictMode = "";
            }
            let res = await (0, node_fetch_1.default)(`https://www.zerochan.net/${keyword}?p=${page}&l=100&json${strictMode}`, opts);
            // console.log(await res.text())
            let response = await safeParseJSON(res);
            if (response == false)
                return "404";
            if (response == "Login First")
                throw new Error("Not Found, please Use Login to Avoid this Error");
            if (!response.items)
                throw new Error("Page Number Too High");
            return response.items;
        };
        this.getTags = async (keyword) => {
            let opts = {
                headers: {
                    "user-agent": this.project
                }
            };
            const response = await (0, node_fetch_1.default)(`https://www.zerochan.net/tags?q=${keyword}&t=&m=list`, opts);
            const body = await response.text();
            // parse the html text and extract titles
            const $ = cheerio_1.default.load(body);
            const titleList = [];
            // console.log($.text())
            $('#content').children('ul').each(function () {
                $(this).children('li').each(function () {
                    const titleText = $(this).children('a').text();
                    let count = $(this).last().text();
                    count = count.replace(titleText + " ", '');
                    let countX = Math.ceil(Number(count) / 100);
                    if (countX > 99)
                        countX = 99;
                    if (Number(count) > 10) {
                        titleList.push({
                            tag: titleText,
                            maxPage: countX
                        });
                    }
                });
            });
            return titleList;
        };
        this.getDetail = async (id) => {
            let opts = {};
            opts = {
                headers: {
                    "user-agent": this.project
                }
            };
            let response = await (0, node_fetch_1.default)(`https://www.zerochan.net/${id}?json`, opts);
            let image = await safeParseJSON(response);
            return image;
        };
        this.project = `${projectName} - ${username}` || undefined;
    }
}
exports.ZeroChan = ZeroChan;
